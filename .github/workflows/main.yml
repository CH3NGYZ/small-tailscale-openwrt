name: Sync and Build Tailscale
on:
  schedule:
    - cron: "10 23 * * *"
  workflow_dispatch:
    inputs:
      version:
        description: 'Tailscale version (leave empty for latest)'
        required: false
  watch:
    types: [started]

permissions:
  contents: write

env:
  REPO_OFFICIAL: "tailscale/tailscale"
  BUILD_PLATFORMS: "amd64"
  # 386 arm arm64 mips mipsle mips64 mips64le
  GO_BUILD_FLAGS: "-tags ts_include_cli -ldflags='-s -w'"
  UPX_COMPRESSION: "--lzma --best --no-progress"

jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.set_version.outputs.TAG }}
      TAG_EXISTS: ${{ steps.check_tag.outputs.EXISTS }}
    steps:
      - name: Check Repository Owner
        run: |
          [ "${{ github.repository_owner }}" == "CH3NGYZ" ] || {
            echo "Repository owner check failed"
            exit 1
          }
      - name: Set Version
        id: set_version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            TAG="${{ github.event.inputs.version }}"
          else
            TAG=$(curl -s "https://api.github.com/repos/${{ env.REPO_OFFICIAL }}/releases/latest" | grep -oP '"tag_name": "\K(.*)(?=")')
          fi
          echo "TAG=$TAG" >> "$GITHUB_OUTPUT"
          echo "Using version: $TAG"

      - name: Check if tag exists
        id: check_tag
        run: |
          if git ls-remote --tags https://github.com/${{ github.repository }} "refs/tags/${{ steps.set_version.outputs.TAG }}"  | grep -q "${{ steps.set_version.outputs.TAG }}"; then
            echo "EXISTS=true" >> "$GITHUB_OUTPUT"
            echo "Tag ${{ steps.set_version.outputs.TAG }} already exists"
          else
            echo "EXISTS=false" >> "$GITHUB_OUTPUT"
            echo "Tag ${{ steps.set_version.outputs.TAG }} does not exist"
          fi

  build_and_release:
    needs: check_version
    if: needs.check_version.outputs.TAG_EXISTS == 'false'
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.check_version.outputs.TAG }}
    steps:
      - name: Checkout Tailscale source
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_OFFICIAL }}
          ref: ${{ env.TAG }}

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Install latest UPX
        run: |
          set -e
          # 获取最新 UPX release tag
          LATEST_UPX=$(curl -s https://api.github.com/repos/upx/upx/releases/latest | grep -oP '"tag_name": "v\K[0-9.]+' | head -n1)
          echo "Latest UPX version: $LATEST_UPX"
      
          # 下载并解压
          curl -LO "https://github.com/upx/upx/releases/download/v${LATEST_UPX}/upx-${LATEST_UPX}-amd64_linux.tar.xz"
          tar -xf "upx-${LATEST_UPX}-amd64_linux.tar.xz"
      
          # 安装
          sudo cp "upx-${LATEST_UPX}-amd64_linux/upx" /usr/local/bin/
          upx --version


      - name: Build optimized binaries
        run: |
          # Create version file
          echo "${{ env.TAG }}" > version.txt

          for arch in ${{ env.BUILD_PLATFORMS }}; do
            echo "Building for $arch..."
            binary_name="tailscaled_${TAG#v}_${arch}"
          
            GOOS=linux GOARCH=$arch go build ${{ env.GO_BUILD_FLAGS }} -o "$binary_name" ./cmd/tailscaled
          
            case "$arch" in
              mips64 | mips64le | amd64)
                echo "Skipping UPX compression for $arch (not supported)"
                ;;
              *)
                upx ${{ env.UPX_COMPRESSION }} "$binary_name"
                ;;
            esac
          done


          ls -lh tailscaled_*
          
      - name: Generate checksums
        run: |
          sha256sum tailscaled_* > SHA256SUMS.txt
          md5sum tailscaled_* > MD5SUMS.txt
          cat SHA256SUMS.txt
          cat MD5SUMS.txt


      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          name: "Tailscale ${{ env.TAG }} (Optimized)"
          body: |
            ## 🚀 Tailscale ${{ env.TAG }} (压缩版本)

            📦 架构支持：${{ env.BUILD_PLATFORMS }}
            
            🌟 包含:
            - UPX压缩过的联合二进制运行文件 ( tailscale + tailscaled )
            
            📝 校验：
            ```bash
            sha256sum -c SHA256SUMS.txt
            md5sum -c MD5SUMS.txt
            ```
            
            🔧 启动方式：
            ```bash
            ./tailscaled [arguments]
            ln -s ./tailscaled ./tailscale
            ./tailscale up
            ```
            
          draft: false
          prerelease: false
          files: |
            tailscaled_*
            version.txt
            SHA256SUMS.txt
            MD5SUMS.txt
