name: Sync and Build Tailscale
on:
  schedule:
    - cron: "10 23 * * *"
  workflow_dispatch:
    inputs:
      version:
        description: 'Tailscale version (leave empty for latest)'
        required: false

env:
  REPO_OFFICIAL: "tailscale/tailscale"
  BUILD_PLATFORMS: "386"
  #  amd64 arm64 geode mips mips64 mips64le mipsle riscv64
  GO_BUILD_FLAGS: "-tags ts_include_cli -ldflags='-s -w'"
  UPX_COMPRESSION: "--lzma --best --no-progress"

jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.set_version.outputs.TAG }}
      TAG_SHORT: ${{ steps.set_version.outputs.TAG_SHORT }}
    steps:
      - name: Set Version
        id: set_version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "TAG=${{ github.event.inputs.version }}" >> "$GITHUB_OUTPUT"
          else
            TAG=$(curl -s "https://api.github.com/repos/${{ env.REPO_OFFICIAL }}/releases/latest" | grep -oP '"tag_name": "\K(.*)(?=")')
            echo "TAG=$TAG" >> "$GITHUB_OUTPUT"
          fi
          echo "TAG_SHORT=${TAG#v}" >> "$GITHUB_OUTPUT"  # 新增：去掉v前缀
          echo "Using version: $TAG"


  download_and_build:
    needs: check_version
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.check_version.outputs.TAG }}
      TAG_SHORT: ${{ needs.check_version.outputs.TAG_SHORT }}
    steps:
      - name: Check Repository Owner
        run: |
          [ "${{ github.repository_owner }}" == "CH3NGYZ" ] || {
            echo "Repository owner check failed"
            exit 1
          }

      - name: Download official TGZ packages
        run: |
          for arch in ${{ env.BUILD_PLATFORMS }}; do
            curl -LO "https://pkgs.tailscale.com/stable/tailscale_${TAG#v}_${arch}.tgz"
          done
          ls -lh *.tgz

      - name: Checkout Tailscale source
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_OFFICIAL }}
          ref: ${{ env.TAG }}

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Install UPX
        run: sudo apt-get update && sudo apt-get install -y upx

      - name: Build optimized binaries
        run: |
          # Create version file
          echo "${TAG}" > version.txt

          for arch in ${{ env.BUILD_PLATFORMS }}; do
            echo "Building for $arch..."
            binary_name="tailscaled_${{ env.TAG }}_${arch}"
            
            # Build combined binary
            GOOS=linux GOARCH=$arch go build ${{ env.GO_BUILD_FLAGS }} -o "$binary_name" ./cmd/tailscaled
            
            # Apply UPX compression (skip unsupported platforms)
            if [[ "$arch" != "mips64" && "$arch" != "mips64le" ]]; then
              upx ${{ env.UPX_COMPRESSION }} "$binary_name"
            fi
          done
          ls tailscaled_*

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          name: "Tailscale ${{ env.TAG }} (Optimized)"
          body: |

            **Includes:**
            - UPX-compressed combined binaries (tailscale+tailscaled)
            
            **Combined Binary Usage:**
            ```
            # As tailscaled
            ./tailscaled [arguments]
            
            # As tailscale CLI (via symlink)
            ln -s tailscaled tailscale
            ./tailscale [command]
            ```
          draft: false
          prerelease: false
          files: |
            tailscale_*
            version.txt
