name: Build Optimized Tailscaled
on:
  schedule:
    - cron: "10 23 * * *"
  workflow_dispatch:
    inputs:
      version:
        description: 'Tailscale version to build (leave empty for latest)'
        required: false

env:
  SOFTWARE_NAME: "tailscaled"
  REPO_OFFICIAL: "tailscale/tailscale"
  BUILD_PLATFORMS: "386 amd64 arm64 geode mips mips64 mips64le mipsle riscv64"
  GO_BUILD_FLAGS: "-tags ts_include_cli -ldflags='-s -w'"
  UPX_COMPRESSION: "--lzma --best --no-progress"

jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.set_version.outputs.TAG }}
    steps:
      - name: Set Version
        id: set_version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "TAG=${{ github.event.inputs.version }}" >> "$GITHUB_OUTPUT"
          else
            TAG=$(curl -s "https://api.github.com/repos/${{ env.REPO_OFFICIAL }}/releases/latest" | grep -oP '"tag_name": "\K(.*)(?=")')
            echo "TAG=$TAG" >> "$GITHUB_OUTPUT"
          fi
          echo "Using version: $TAG"

  build:
    needs: check_version
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.check_version.outputs.TAG }}
    steps:
      - name: Checkout Tailscale source
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_OFFICIAL }}
          ref: ${{ env.TAG }}

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Install UPX
        run: |
          sudo apt-get update
          sudo apt-get install -y upx

      - name: Build for all platforms
        run: |
          for platform in ${{ env.BUILD_PLATFORMS }}; do
            echo "Building for $platform..."
            
            # Build combined binary
            OUTPUT="${SOFTWARE_NAME}_${TAG#v}_${platform}"
            GOOS=linux GOARCH=$platform go build ${{ env.GO_BUILD_FLAGS }} -o "$OUTPUT" ./cmd/tailscaled
            
            # Compress with UPX (skip unsupported platforms)
            if [[ "$platform" != "mips64" && "$platform" != "mips64le" && "$platform" != "geode" ]]; then
              upx ${{ env.UPX_COMPRESSION }} "$OUTPUT"
            fi
            
            # Generate checksum
            sha256sum "$OUTPUT" >> checksums.txt
          done

          # Create version file
          echo "$TAG" > version.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          name: "Optimized Tailscaled ${{ env.TAG }}"
          body: |
            Optimized Tailscaled Build ${{ env.TAG }}
            
            This release contains UPX-compressed tailscaled binaries built with:
            - Combined tailscale/tailscaled functionality
            - `--extra-small` build flag
            - Stripped debug symbols (-ldflags="-s -w")
            - UPX LZMA compression
            
            **Supported Architectures**: ${{ env.BUILD_PLATFORMS }}
            
            ### Usage
            ```
            # As tailscaled
            ./tailscaled_${TAG#v}_[arch] [arguments]
            
            # As tailscale CLI (via symlink)
            ln -s tailscaled_${TAG#v}_[arch] tailscale
            ./tailscale [command]
            ```
          draft: false
          prerelease: false
          files: |
            ${SOFTWARE_NAME}_${TAG#v}_*
            checksums.txt
            version.txt
