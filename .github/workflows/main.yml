name: Sync and Build Tailscale

on:
  schedule:
    - cron: "10 23 * * *"
  workflow_dispatch:
    inputs:
      versions:
        description: 'Tailscale versions (e.g. 1.76.1-1.78.0,1.79.2 — leave empty for latest)'
        required: false
  watch:
    types: [started]

permissions:
  contents: write

env:
  REPO_OFFICIAL: "tailscale/tailscale"
  BUILD_PLATFORMS: "amd64 386 arm arm64 mips mipsle mips64 mips64le"
  GO_BUILD_FLAGS: "-tags ts_include_cli -ldflags='-s -w'"

jobs:

  prepare_versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - name: Fetch all tags from official repo
        id: fetch_tags
        run: |
          curl -s "https://api.github.com/repos/${{ env.REPO_OFFICIAL }}/tags?per_page=1000" | \
            jq -r '.[].name' | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' > all_tags.txt

      - name: Parse user input and build matrix
        id: set_matrix
        run: |
          echo "===> 输入参数: ${{ github.event.inputs.versions }}"
          input="${{ github.event.inputs.versions }}"
      
          if [ -z "$input" ]; then
            tag=$(head -n1 all_tags.txt)
            echo "未提供输入，默认取第一个 tag: $tag"
            echo "matrix=$(jq -cn --arg v "$tag" '[ $v ]')" >> "$GITHUB_OUTPUT"
            exit 0
          fi
      
          echo "===> 开始解析版本范围：$input"
      
          declare -A versions
          IFS=',' read -ra parts <<< "$input"
          for part in "${parts[@]}"; do
            if [[ "$part" == *"-"* ]]; then
              start=${part%-*}
              end=${part#*-}
              echo "  发现范围: $start 到 $end"
              matched=$(sed 's/^v//' all_tags.txt | sort -V | awk -v s="$start" -v e="$end" '$0 >= s && $0 <= e')
              echo "    匹配结果：$(echo "$matched" | xargs)"
              for v in $matched; do
                versions["v$v"]=1
              done
            else
              echo "  发现单一版本: $part"
              versions["v$part"]=1
            fi
          done
      
          echo "===> 收集到版本（未排序）:"
          for v in "${!versions[@]}"; do
            echo "  - $v"
          done
      
          all_versions_sorted=$(for v in "${!versions[@]}"; do echo "$v"; done | sort -V)
          echo "===> 排序后版本:"
          echo "$all_versions_sorted"
      
          jq_array=$(printf '%s\n' $all_versions_sorted | jq -R . | jq -s .)
          echo "===> 生成 matrix:"
          echo "$jq_array" | jq -c
          echo "matrix=$(echo "$jq_array" | jq -c)" >> "$GITHUB_OUTPUT"


  build_and_release:
    needs: prepare_versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJson(needs.prepare_versions.outputs.matrix) }}
      fail-fast: false  # 确保即使某个版本失败，其他版本继续执行
      max-parallel: 1
    env:
      TAG: v${{ matrix.version }}
    steps:
      - name: Check if tag already exists in current repo
        run: |
          if git ls-remote --tags "https://github.com/${{ github.repository }}" "refs/tags/v${{ matrix.version }}" | grep -q "v${{ matrix.version }}"; then
            echo "Tag v${{ matrix.version }} already exists in current repo, skipping"
            exit 0
          fi

      - name: Checkout Tailscale source
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_OFFICIAL }}
          ref: ${{ env.TAG }}

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Install latest UPX
        run: |
          set -e
          LATEST_UPX=$(curl -s https://api.github.com/repos/upx/upx/releases/latest | grep -oP '"tag_name": "v\K[0-9.]+' | head -n1)
          echo "Latest UPX version: $LATEST_UPX"
          curl -LO "https://github.com/upx/upx/releases/download/v${LATEST_UPX}/upx-${LATEST_UPX}-amd64_linux.tar.xz"
          tar -xf "upx-${LATEST_UPX}-amd64_linux.tar.xz"
          sudo cp "upx-${LATEST_UPX}-amd64_linux/upx" /usr/local/bin/
          upx --version

      - name: Build optimized binaries
        run: |
          echo "${{ env.TAG }}" > version.txt
          for arch in ${{ env.BUILD_PLATFORMS }}; do
            echo "Building for $arch..."
            binary_name="tailscaled_linux_${arch}"

            export CGO_ENABLED=0
            export GOOS=linux
            export GOARCH=$arch

            case "$arch" in
              mips|mipsle)
                export GOMIPS=softfloat
                ;;
            esac

            ./build_dist.sh --extra-small --box -o "$binary_name" ./cmd/tailscaled

            case "$arch" in
              mips64|mips64le)
                echo "⚠️  跳过 $arch 的 UPX 压缩"
                ;;
              *)
                if [[ -f "$binary_name" ]]; then
                  upx --lzma --best --no-progress "$binary_name"
                else
                  echo "❌  编译失败: $binary_name 不存在"
                fi
                ;;
            esac
          done

      - name: Generate checksums
        run: |
          sha256sum tailscaled_* > SHA256SUMS.txt
          md5sum tailscaled_* > MD5SUMS.txt
          cat SHA256SUMS.txt
          cat MD5SUMS.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ matrix.version }}
          name: "Tailscale v${{ matrix.version }}"
          body: |
            ## 🚀 Tailscale ${{ matrix.version }} UPX压缩版发布
            
            [![Downloads](https://img.shields.io/github/downloads/CH3NGYZ/small-tailscale-openwrt/${{ matrix.version }}/total)](https://github.com/CH3NGYZ/small-tailscale-openwrt/releases/${{ matrix.version }})
            
            🧩 **支持架构**：
            `${{ env.BUILD_PLATFORMS }}`
          
            ⚙️  **内容说明**：
            - 已合并并压缩的运行文件：包含 `tailscale` 和 `tailscaled` 的 [联合二进制](https://tailscale.com/kb/1207/small-tailscale)
            - *注意：由于 UPX 不支持 `mips64` 与 `mips64le`，这两个架构版本为未压缩原始文件*
          
            📄 **校验方式**：
            ```bash
            sha256sum -c SHA256SUMS.txt
            md5sum -c MD5SUMS.txt
            ```
            
            🔧  **快速启动**：
            ```bash
            chmod +x /path/to/tailscaled-linux-amd64
            ln -s /path/to/tailscaled-linux-amd64 /usr/bin/tailscale
            ln -s /path/to/tailscaled-linux-amd64 /usr/bin/tailscaled
            tailscaled
            tailscale up
            ```

            📦 **附带文件**：
            | 文件名               | 说明                  |
            |----------------------|-----------------------|
            | tailscaled_linux_*    | 不同架构对应的可执行文件 |
            | SHA256SUMS.txt        | SHA256 校验文件        |
            | MD5SUMS.txt           | MD5 校验文件           |
            | version.txt           | 当前版本标识          |

            📜 **更新日志**：
            [点此查看](https://tailscale.com/changelog)
            
          draft: false
          prerelease: false
          files: |
            tailscaled_*
            version.txt
            SHA256SUMS.txt
            MD5SUMS.txt
