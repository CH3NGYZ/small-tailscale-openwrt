name: Sync and Build Tailscale
on:
  schedule:
    - cron: "10 23 * * *"
  workflow_dispatch:
    inputs:
      version:
        description: 'Tailscale version (leave empty for latest)'
        required: false

permissions:
  contents: write

env:
  REPO_OFFICIAL: "tailscale/tailscale"
  BUILD_PLATFORMS: "386 amd64 arm64"  # 精简架构列表用于测试
  GO_BUILD_FLAGS: "-tags ts_include_cli -ldflags='-s -w'"
  UPX_COMPRESSION: "--lzma --best --no-progress"

jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      TAG: ${{ steps.set_version.outputs.TAG }}
      TAG_EXISTS: ${{ steps.check_tag.outputs.EXISTS }}
    steps:
      - name: Check Repository Owner
        run: |
          [ "${{ github.repository_owner }}" == "CH3NGYZ" ] || {
            echo "Repository owner check failed"
            exit 1
          }
      - name: Set Version
        id: set_version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            TAG="${{ github.event.inputs.version }}"
          else
            TAG=$(curl -s "https://api.github.com/repos/${{ env.REPO_OFFICIAL }}/releases/latest" | grep -oP '"tag_name": "\K(.*)(?=")')
          fi
          echo "TAG=$TAG" >> "$GITHUB_OUTPUT"
          echo "Using version: $TAG"

      - name: Check if tag exists
        id: check_tag
        run: |
          if git ls-remote --tags https://github.com/${{ github.repository }} "refs/tags/${{ steps.set_version.outputs.TAG }}"  | grep -q "${{ steps.set_version.outputs.TAG }}"; then
            echo "EXISTS=true" >> "$GITHUB_OUTPUT"
            echo "Tag ${{ steps.set_version.outputs.TAG }} already exists"
          else
            echo "EXISTS=false" >> "$GITHUB_OUTPUT"
            echo "Tag ${{ steps.set_version.outputs.TAG }} does not exist"
          fi

  build_and_release:
    needs: check_version
    if: needs.check_version.outputs.TAG_EXISTS == 'false'
    runs-on: ubuntu-latest
    env:
      TAG: ${{ needs.check_version.outputs.TAG }}
    steps:
      - name: Checkout Tailscale source
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_OFFICIAL }}
          ref: ${{ env.TAG }}

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Install UPX
        run: sudo apt-get update && sudo apt-get install -y upx

      - name: Build optimized binaries
        run: |
          # Create version file
          echo "${{ env.TAG }}" > version.txt

          for arch in ${{ env.BUILD_PLATFORMS }}; do
            echo "Building for $arch..."
            binary_name="tailscaled_${TAG#v}_${arch}"
            
            # Build combined binary
            GOOS=linux GOARCH=$arch go build ${{ env.GO_BUILD_FLAGS }} -o "$binary_name" ./cmd/tailscaled
            
            # Apply UPX compression
            upx ${{ env.UPX_COMPRESSION }} "$binary_name"
          done

          ls -lh tailscaled_*

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          name: "Tailscale ${{ env.TAG }} (Optimized)"
          body: |
            ## Optimized Tailscale Build ${{ env.TAG }}
            
            **Includes:**
            - UPX-compressed combined binaries (tailscale+tailscaled)
            
            **Supported Architectures:** ${{ env.BUILD_PLATFORMS }}
            
            **Usage:**
            ```
            # As tailscaled
            ./tailscaled_[version]_[arch] [arguments]
            
            # As tailscale CLI (via symlink)
            ln -s tailscaled_[version]_[arch] tailscale
            ./tailscale [command]
            ```
          draft: false
          prerelease: false
          files: |
            tailscaled_*
            version.txt
