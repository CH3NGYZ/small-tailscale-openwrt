name: Sync and Build Tailscale
on:
  schedule:
    - cron: '10 23 * * *'
  workflow_dispatch:
    inputs:
      version:
        description: 'Tailscale version to sync (leave empty for latest)'
        required: false
env:
  SOFTWARE_NAME: 'tailscale'
  REPO_OFFICIAL: 'tailscale/tailscale'
  UPX_COMPRESSION: '--lzma --best --no-progress'
  BUILD_PLATFORMS: '386 amd64 arm64 geode mips mips64 mips64le mipsle riscv64'

jobs:
  check_versions:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      LATEST_TAG: ${{ steps.get_official_tag.outputs.TAG }}
      EXISTING_TAG: ${{ steps.get_existing_tag.outputs.TAG }}
    steps:
      - name: Set Version
        id: set_version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            version="${{ github.event.inputs.version }}"
            echo "Using manually specified version: $version"
          else
            version=""
            echo "No version specified, will use latest"
          fi
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Get latest official Tailscale tag
        id: get_official_tag
        run: |
          if [ -n "${{ steps.set_version.outputs.version }}" ]; then
            echo "TAG=${{ steps.set_version.outputs.version }}" >> "$GITHUB_OUTPUT"
          else
            latest_tag=$(curl -s "https://api.github.com/repos/${{ env.REPO_OFFICIAL }}/releases/latest" | grep -oP '"tag_name": "\K(.*)(?=")')
            echo "Latest official Tailscale tag: $latest_tag"
            echo "TAG=$latest_tag" >> "$GITHUB_OUTPUT"
          fi

      - name: Check existing tags in this repo
        id: get_existing_tag
        run: |
          existing_tag=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.get_official_tag.outputs.TAG }}" | grep -oP '"tag_name": "\K(.*)(?=")' || echo "")
          echo "Existing tag in this repo: $existing_tag"
          echo "TAG=$existing_tag" >> "$GITHUB_OUTPUT"

  download_and_build:
    needs: check_versions
    if: needs.check_versions.outputs.LATEST_TAG != needs.check_versions.outputs.EXISTING_TAG
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TAG: ${{ needs.check_versions.outputs.LATEST_TAG }}
    steps:
      - name: Check Repository Owner
        id: check_owner
        run: |
          if [ "${{ github.repository_owner }}" != "CH3NGYZ" ]; then
            echo "Repository owner is not CH3NGYZ. Cancelling the job."
            exit 1
          fi

      - name: Checkout Tailscale source code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_OFFICIAL }}
          ref: ${{ env.TAG }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Get UPX latest version
        run: |
          echo "UPX_VERSION=$(
            curl -s https://api.github.com/repos/upx/upx/releases/latest \
            | jq -r '.tag_name' \
            | cut -c 2-
          )" >> "$GITHUB_ENV"

      - name: Download and setup UPX
        run: |
          wget -q "https://github.com/upx/upx/releases/latest/download/upx-${{ env.UPX_VERSION }}-amd64_linux.tar.xz"
          tar --to-stdout -xf "upx-${{ env.UPX_VERSION }}-amd64_linux.tar.xz" \
            "upx-${{ env.UPX_VERSION }}-amd64_linux/upx" > "${PWD}/upx"
          chmod -v +x "${PWD}/upx"

      - name: Build and compress binaries
        run: |
          for platform in ${{ env.BUILD_PLATFORMS }}; do
            echo "Building for $platform..."
            
            # Build the binary
            binary_name="${SOFTWARE_NAME}-linux-${platform}"
            GOOS=linux GOARCH=$platform ./build_dist.sh \
              --extra-small --box \
              -o "$binary_name" ./cmd/tailscale ./cmd/tailscaled
            
            # Compress with UPX
            "${PWD}/upx" $UPX_COMPRESSION "$binary_name"
            
            # Rename to standard format
            mv "$binary_name" "${SOFTWARE_NAME}_${TAG#v}_${platform}"
          done

      - name: Download pre-built TGZ packages
        run: |
          for platform in ${{ env.BUILD_PLATFORMS }}; do
            curl --remote-name "https://pkgs.tailscale.com/stable/${SOFTWARE_NAME}_${TAG#v}_${platform}.tgz"
          done

      - name: Create checksums
        run: |
          sha256sum ${SOFTWARE_NAME}_* > "checksums.txt"
          echo "Built version: ${TAG}" > "version.txt"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.TAG }}
          body: |
            Tailscale ${{ env.TAG }} - Optimized Build
            
            This release contains:
            - UPX-compressed binaries built from source
            - Original pre-built TGZ packages
            
            Checksums:
            ```
            $(cat checksums.txt)
            ```
          draft: false
          prerelease: false
          files: |
            ${SOFTWARE_NAME}_${TAG#v}_*
            checksums.txt
            version.txt
